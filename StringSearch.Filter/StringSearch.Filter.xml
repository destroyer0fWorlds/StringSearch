<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StringSearch.Filter</name>
    </assembly>
    <members>
        <member name="T:StringSearch.Filter.ConditionOperatorType">
            <summary>
            Operator type
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.Equals">
            <summary>
            Is equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.NotEquals">
            <summary>
            Is not equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.Like">
            <summary>
            Is like
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.NotLike">
            <summary>
            Is not like
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.GreaterThan">
            <summary>
            Is greater than
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.GreaterThanOrEqualTo">
            <summary>
            Is greater than or equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.LessThan">
            <summary>
            Is less than
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.LessThanOrEqualTo">
            <summary>
            Is less than or equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.IsNull">
            <summary>
            Is null
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.IsNotNull">
            <summary>
            Is not null
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.DoesNotStartWith">
            <summary>
            Does not start with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.EndsWith">
            <summary>
            Ends with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.DoesNotEndWith">
            <summary>
            Does not end with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.Between">
            <summary>
            Is between
            </summary>
        </member>
        <member name="F:StringSearch.Filter.ConditionOperatorType.NotBetween">
            <summary>
            Is not between
            </summary>
        </member>
        <member name="T:StringSearch.Filter.Criterion">
            <summary>
            Base criterion
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Criterion.Raw">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Criterion.Name">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Criterion.Operator">
            <summary>
            Operator type
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Criterion.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Criterion.LogicOperator">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.Criterion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Criterion"/> class
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Criterion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Criterion"/> class with the specified name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:StringSearch.Filter.Criterion.#ctor(System.String,StringSearch.Filter.ConditionOperatorType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Criterion"/> class with the specified name, operator, and value
            </summary>
            <param name="name"></param>
            <param name="operator"></param>
            <param name="value"></param>
        </member>
        <member name="T:StringSearch.Filter.CriterionParser">
            <summary>
            Single value criterion parser
            </summary>
        </member>
        <member name="M:StringSearch.Filter.CriterionParser.Parse(System.Collections.Generic.IEnumerable{StringSearch.Filter.Tokens.IToken})">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.FilterParser">
            <summary>
            Utility for parsing a filter string to a hierarchical structure of objects
            </summary>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.#ctor">
            <summary>
            Initialize an instance of a <see cref="T:StringSearch.Filter.FilterParser"/> class
            </summary>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.#ctor(System.Collections.Generic.Dictionary{StringSearch.Filter.OperatorType,System.String})">
            <summary>
            Initialize an instance of a <see cref="T:StringSearch.Filter.FilterParser"/> class specifying override values
            </summary>
            <param name="operatorOverrides"></param>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.Parse(System.String)">
            <summary>
            Parse a filter string
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.Parse(System.String,System.Collections.Generic.Dictionary{StringSearch.Filter.OperatorType,System.String})">
            <summary>
            Parse a filter string
            </summary>
            <param name="filter"></param>
            <param name="operatorOverrides"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.ParseAs``1(System.String,StringSearch.Filter.IConverter{``0})">
            <summary>
            Parse a filter string to a custom type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.ParseAs``1(System.String,StringSearch.Filter.IConverter{``0},System.Collections.Generic.Dictionary{StringSearch.Filter.OperatorType,System.String})">
            <summary>
            Parse a filter string to a custom type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="converter"></param>
            <param name="operatorOverrides"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.ConvertGroupsToCriteria(System.Collections.Generic.IEnumerable{StringSearch.Filter.Groups.IGroup})">
            <summary>
            Recursively convert groups into criteria
            </summary>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.FilterParser.InitOperators(System.Collections.Generic.Dictionary{StringSearch.Filter.OperatorType,System.String})">
            <summary>
            Initialize the list of operators by combining all available into a single collection
            </summary>
            <param name="operatorOverrides"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.Groups.CriterionGroup">
            <summary>
            Criterion group
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.CriterionGroup.HasNestedGroups">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Groups.Group">
            <summary>
            Base group
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.Group.Index">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Groups.Group.Value">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Groups.Group.NestedGroups">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Groups.Group.HasNestedGroups">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Groups.Group.Tokens">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Groups.GroupIdentifier">
            <summary>
            Utility for identifying group type
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupIdentifier.#ctor(StringSearch.Filter.Groups.IGroup,System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instances of the <see cref="T:StringSearch.Filter.Groups.GroupIdentifier"/> class
            </summary>
            <param name="group"></param>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupIdentifier.IsNestedCondition">
            <summary>
            Indicates whether this is a nested condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupIdentifier.IsRangeCondition">
            <summary>
            Indicates whether this is a range condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupIdentifier.IsSingleCondition">
            <summary>
            Indicates whether this is a single value condition
            </summary>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.Groups.GroupParser">
            <summary>
            Parses a string into logical groups
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.#ctor(System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Groups.GroupParser"/> class
            </summary>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.Parse(System.String)">
            <summary>
            Parses the supplied string into a hierarchy of conditions and operators
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.RecursiveParse(System.String)">
            <summary>
            Recursively parse a string value into groups
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.IdentifyGroups(System.String)">
            <summary>
            Process a string, attempting to break it into more recognizable components
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.Split(System.String[],System.String)">
            <summary>
            Further slit a collection of strings into multiple sub strings using the supplied value
            </summary>
            <param name="values"></param>
            <param name="splitValue"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Groups.GroupParser.ParseTokens(StringSearch.Filter.Groups.IGroup)">
            <summary>
            Converts a group's value into recognizable tokens
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.Groups.IGroup">
            <summary>
            Represents a group of values that describe a criterion
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.IGroup.Index">
            <summary>
            Starting index where this group was found in the original string
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.IGroup.Value">
            <summary>
            The original string value that this group encapsulates
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.IGroup.NestedGroups">
            <summary>
            Nested groups
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.IGroup.Tokens">
            <summary>
            The original <see cref="P:StringSearch.Filter.Groups.IGroup.Value"/> field parsed as meaningful tokens
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.IGroup.HasNestedGroups">
            <summary>
            Indicates whether this group is made up of nested groups
            </summary>
        </member>
        <member name="T:StringSearch.Filter.Groups.LogicGroup">
            <summary>
            And/Or group
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Groups.LogicGroup.HasNestedGroups">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.IConverter`1">
            <summary>
            Custom converter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StringSearch.Filter.IConverter`1.ConvertTo(System.Collections.Generic.IEnumerable{StringSearch.Filter.ICriterion})">
            <summary>
            Convert the supplied criteria to a custom type
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.ICriterion">
            <summary>
            Represents a criterion
            </summary>
        </member>
        <member name="P:StringSearch.Filter.ICriterion.Raw">
            <summary>
            Raw input
            </summary>
        </member>
        <member name="P:StringSearch.Filter.ICriterion.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:StringSearch.Filter.ICriterion.LogicOperator">
            <summary>
            Logic operator indicates how multiple criteria should be combined
            </summary>
        </member>
        <member name="T:StringSearch.Filter.ICriterionParser">
            <summary>
            Utility for parsing tokens into criteria
            </summary>
        </member>
        <member name="M:StringSearch.Filter.ICriterionParser.Parse(System.Collections.Generic.IEnumerable{StringSearch.Filter.Tokens.IToken})">
            <summary>
            Parse a collection of tokens as a criterion
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.IOperator">
            <summary>
            Represents a configured operation
            </summary>
        </member>
        <member name="P:StringSearch.Filter.IOperator.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.IOperator.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:StringSearch.Filter.LogicOperatorType">
            <summary>
            Logic operator type
            </summary>
        </member>
        <member name="F:StringSearch.Filter.LogicOperatorType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:StringSearch.Filter.LogicOperatorType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:StringSearch.Filter.NestedCriterion">
            <summary>
            Nested criterion
            </summary>
        </member>
        <member name="P:StringSearch.Filter.NestedCriterion.Raw">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.NestedCriterion.Name">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.NestedCriterion.Criteria">
            <summary>
            Nested criteria
            </summary>
        </member>
        <member name="P:StringSearch.Filter.NestedCriterion.LogicOperator">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.NestedCriterion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.NestedCriterion"/> class
            </summary>
        </member>
        <member name="T:StringSearch.Filter.Operator">
            <summary>
            Base operator
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Operator.Value">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.Operator.Type">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.Operator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Operator"/> class
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Operator.#ctor(System.String,StringSearch.Filter.OperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Operator"/> class with the supplied value and operation
            </summary>
            <param name="value"></param>
            <param name="operation"></param>
        </member>
        <member name="M:StringSearch.Filter.Operator.ToString">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.Operator.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.Operator.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.OperatorType">
            <summary>
            Supported operations
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.Equals">
            <summary>
            Is equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.NotEquals">
            <summary>
            Is not equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.Like">
            <summary>
            Is like
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.NotLike">
            <summary>
            Is not like
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.GreaterThan">
            <summary>
            Is greater than
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.GreaterThanOrEqualTo">
            <summary>
            Is greater than or equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.LessThan">
            <summary>
            Is less than
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.LessThanOrEqualTo">
            <summary>
            Is less than or equal to
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.IsNull">
            <summary>
            Is null
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.IsNotNull">
            <summary>
            Is not null
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.StartsWith">
            <summary>
            Starts with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.DoesNotStartWith">
            <summary>
            Does not start with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.EndsWith">
            <summary>
            Ends with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.DoesNotEndWith">
            <summary>
            Does not end with
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.Between">
            <summary>
            Is between
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.NotBetween">
            <summary>
            Is not between
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:StringSearch.Filter.OperatorType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:StringSearch.Filter.RangeCriterion">
            <summary>
            Range criterion
            </summary>
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.Raw">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.Name">
            <inheritdoc />
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.StartValue">
            <summary>
            Start value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.EndValue">
            <summary>
            End value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.RangeCriterion.LogicOperator">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.RangeCriterion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.RangeCriterion"/> class
            </summary>
        </member>
        <member name="M:StringSearch.Filter.RangeCriterion.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.RangeCriterion"/> class with the specified name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:StringSearch.Filter.RangeCriterion.#ctor(System.String,StringSearch.Filter.ConditionOperatorType,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.RangeCriterion"/> class with the specified name, operator, and values
            </summary>
            <param name="name"></param>
            <param name="operator"></param>
            <param name="startValue"></param>
            <param name="endValue"></param>
        </member>
        <member name="T:StringSearch.Filter.RangeCriterionParser">
            <summary>
            Range criterion parser
            </summary>
        </member>
        <member name="M:StringSearch.Filter.RangeCriterionParser.Parse(System.Collections.Generic.IEnumerable{StringSearch.Filter.Tokens.IToken})">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Tokens.IToken">
            <summary>
            Represents a discrete value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.IToken.Value">
            <summary>
            The original string value
            </summary>
        </member>
        <member name="T:StringSearch.Filter.Tokens.ITokenParser">
            <summary>
            Utility for parsing tokens out of a string value
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.ITokenParser.Parse(System.String)">
            <summary>
            Parse a string value into tokens
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.Tokens.LogicToken">
            <summary>
            Logical and/or token
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.LogicToken.Operator">
            <summary>
            Logic operator (and/or)
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.LogicToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.LogicToken"/> class
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.LogicToken.#ctor(StringSearch.Filter.LogicOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.LogicToken"/> class with the supplied operator
            </summary>
            <param name="operator"></param>
        </member>
        <member name="T:StringSearch.Filter.Tokens.LogicTokenParser">
            <summary>
            Utility for parsing and/or tokens
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.LogicTokenParser.#ctor(System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.LogicTokenParser"/> class
            </summary>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Tokens.LogicTokenParser.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Tokens.NameToken">
            <summary>
            Property name token
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.NameToken.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.NameToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.NameToken"/>
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.NameToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.NameToken"/> class with the supplied name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:StringSearch.Filter.Tokens.OperatorToken">
            <summary>
            Operator token
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.OperatorToken.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.OperatorToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.OperatorToken"/>
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.OperatorToken.#ctor(StringSearch.Filter.ConditionOperatorType)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.OperatorToken"/> class with the supplied operator
            </summary>
            <param name="operator"></param>
        </member>
        <member name="T:StringSearch.Filter.Tokens.RangeToken">
            <summary>
            Range token
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.RangeToken.StartValue">
            <summary>
            Start value
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.RangeToken.EndValue">
            <summary>
            End value
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.RangeToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.RangeToken"/>
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.RangeToken.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.RangeToken"/> class with the supplied start and end values
            </summary>
            <param name="startValue"></param>
            <param name="endValue"></param>
        </member>
        <member name="T:StringSearch.Filter.Tokens.RangeTokenParser">
            <summary>
            Utility for parsing range criteria tokens
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.RangeTokenParser.#ctor(System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.RangeTokenParser"/> class
            </summary>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Tokens.RangeTokenParser.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Tokens.SingleTokenParser">
            <summary>
            Utility for parsing single value criteria tokens
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.SingleTokenParser.#ctor(System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.SingleTokenParser"/> class
            </summary>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Tokens.SingleTokenParser.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Tokens.Token">
            <summary>
            Base token
            </summary>
        </member>
        <member name="P:StringSearch.Filter.Tokens.Token.Value">
            <inheritdoc />
        </member>
        <member name="T:StringSearch.Filter.Tokens.TokenParser">
            <summary>
            Base token parser
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.TokenParser.#ctor(System.Collections.Generic.HashSet{StringSearch.Filter.IOperator})">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.TokenParser"/> class
            </summary>
            <param name="operators"></param>
        </member>
        <member name="M:StringSearch.Filter.Tokens.TokenParser.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:StringSearch.Filter.Tokens.TokenParser.FormatValue(System.String)">
            <summary>
            Format the incoming value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Tokens.TokenParser.SplitValue(System.String)">
            <summary>
            Split the incoming value into raw components
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:StringSearch.Filter.Tokens.TokenParser.ConvertOperatorTypeToConditionType(StringSearch.Filter.OperatorType)">
            <summary>
            Convert a <see cref="T:StringSearch.Filter.OperatorType"/> enum to a <see cref="T:StringSearch.Filter.ConditionOperatorType"/> enum
            </summary>
            <param name="tokenType"></param>
            <returns></returns>
        </member>
        <member name="T:StringSearch.Filter.Tokens.ValueToken">
            <summary>
            Value token
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.ValueToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.ValueToken"/>
            </summary>
        </member>
        <member name="M:StringSearch.Filter.Tokens.ValueToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringSearch.Filter.Tokens.ValueToken"/> class with the supplied value
            </summary>
            <param name="value"></param>
        </member>
    </members>
</doc>
